package com.SVRPlatform.action;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.interceptor.ServletRequestAware;

import com.SVRPlatform.Utils.VerifyUser;
import com.SVRPlatform.constants.Constants;
import com.SVRPlatform.service.VulnerabilityWatchService;
import com.opensymphony.xwork2.ActionSupport;

public class VulnerabilityWatchAction extends ActionSupport implements
		ServletRequestAware {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String vulnerabilityNumber;
	private VulnerabilityWatchService vulnerabilityWatchService;
	private InputStream inputStream;
	private HttpServletRequest request;
	
	

	public String getVulnerabilityNumber() {
		return vulnerabilityNumber;
	}



	public void setVulnerabilityNumber(String vulnerabilityNumber) {
		this.vulnerabilityNumber = vulnerabilityNumber;
	}



	public VulnerabilityWatchService getVulnerabilityWatchService() {
		return vulnerabilityWatchService;
	}



	public void setVulnerabilityWatchService(
			VulnerabilityWatchService vulnerabilityWatchService) {
		this.vulnerabilityWatchService = vulnerabilityWatchService;
	}



	public InputStream getInputStream() {
		return inputStream;
	}



	public void setInputStream(InputStream inputStream) {
		this.inputStream = inputStream;
	}

	@Override
	public void setServletRequest(HttpServletRequest request) {
		// TODO Auto-generated method stub
		
		this.request = request;
	}
	
	public String voteUp(){
		String nowUser = VerifyUser.getNowUser(request);
		if (nowUser == null){
			return Constants.NOTSIGNEDIN;
		}
		int vulnerabilityId = Integer.parseInt(vulnerabilityNumber.split("-")[2]);
		String message = vulnerabilityWatchService.voteUp(vulnerabilityId, nowUser);
		if (message.equals(Constants.SUCCESS))
			inputStream = new ByteArrayInputStream(Constants.SUCCESS.getBytes());
		else if (message.equals(Constants.ALREADYVOTED))
			inputStream = new ByteArrayInputStream(Constants.ALREADYVOTED.getBytes());
		else if (message.equals(Constants.CREDITSNOTENOUGH))
			inputStream = new ByteArrayInputStream(Constants.CREDITSNOTENOUGH.getBytes());
		else if (message.equals(Constants.OWNER))
			inputStream = new ByteArrayInputStream(Constants.OWNER.getBytes());
		else if (message.equals(Constants.DBERROR))
			inputStream = new ByteArrayInputStream(Constants.DBERROR.getBytes());
		return Constants.SUCCESS;
	}
	public String voteDown(){
		String nowUser = VerifyUser.getNowUser(request);
		if (nowUser == null){
			return Constants.NOTSIGNEDIN;
		}

		int vulnerabilityId = Integer.parseInt(vulnerabilityNumber.split("-")[2]);
		String message = vulnerabilityWatchService.voteUp(vulnerabilityId, nowUser);
		if (message.equals(Constants.SUCCESS))
			inputStream = new ByteArrayInputStream(Constants.SUCCESS.getBytes());
		else if (message.equals(Constants.ALREADYVOTED))
			inputStream = new ByteArrayInputStream(Constants.ALREADYVOTED.getBytes());
		else if (message.equals(Constants.CREDITSNOTENOUGH))
			inputStream = new ByteArrayInputStream(Constants.CREDITSNOTENOUGH.getBytes());
		else if (message.equals(Constants.OWNER))
			inputStream = new ByteArrayInputStream(Constants.OWNER.getBytes());
		else if (message.equals(Constants.DBERROR))
			inputStream = new ByteArrayInputStream(Constants.DBERROR.getBytes());
		return Constants.SUCCESS;
	}

}
