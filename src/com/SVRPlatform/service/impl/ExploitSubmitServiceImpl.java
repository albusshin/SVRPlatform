package com.SVRPlatform.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.SVRPlatform.dao.ExploitDAO;
import com.SVRPlatform.dao.UserDAO;
import com.SVRPlatform.dao.VulnerabilityDAO;
import com.SVRPlatform.model.Exploit;
import com.SVRPlatform.model.User;
import com.SVRPlatform.model.Vulnerability;
import com.SVRPlatform.service.ExploitSubmitService;

public class ExploitSubmitServiceImpl implements ExploitSubmitService {
	private UserDAO userDAO;
	private VulnerabilityDAO vulnerabilityDAO;
	private ExploitDAO exploitDAO;
	
	
	public UserDAO getUserDAO() {
		return userDAO;
	}

	public void setUserDAO(UserDAO userDAO) {
		this.userDAO = userDAO;
	}

	public VulnerabilityDAO getVulnerabilityDAO() {
		return vulnerabilityDAO;
	}

	public void setVulnerabilityDAO(VulnerabilityDAO vulnerabilityDAO) {
		this.vulnerabilityDAO = vulnerabilityDAO;
	}

	public ExploitDAO getExploitDAO() {
		return exploitDAO;
	}

	public void setExploitDAO(ExploitDAO exploitDAO) {
		this.exploitDAO = exploitDAO;
	}

	@Override
	public Map<String, String> exploitSubmit(String vulnerabilityNumber,
			String email, String content, String language) {
		// TODO Auto-generated method stub
		Map<String, String> map = new HashMap<String, String>();
		
		if (content.compareTo("") == 0) 
			map.put("content", "empty");
		else if (content.length() > 5000) 
			map.put("content", "tooLong");
		else map.put("content", "OK");
		
		if (map.get("content").equals("OK")) {
			int vulnerabilityId = Integer.parseInt(vulnerabilityNumber.split("-")[2]);
			Vulnerability vulnerability = (Vulnerability) vulnerabilityDAO.getByID(vulnerabilityId);
			User user = userDAO.getUserByEmail(email);
			if(exploitDAO.getByUserAndVulnerability(user, vulnerability, -1, -1).size() != 0){
				map.put("content", "alreadySubmit");
				map.put("status", "fail");
				return map;
			}
			Exploit exploit = new Exploit();
			exploit.setVulnerability(vulnerability);
			//solution.setCommentTitle(title);
			exploit.setContent(content);
			exploit.setDatetime(new Date());
			exploit.setUser(user);
			exploit.setUp(new Integer(0));
			exploit.setDown(new Integer(0));
			
			exploitDAO.add(exploit);
			map.put("status", "success");
		}
		else map.put("status", "fail");
		
		return map;
	}

	@Override
	public Map<String, String> exploitEdit(String vulnerabilityNumber,
			String email, String content, String language) {
		
		Map<String, String> map = new HashMap<String, String>();
		
		if (content.compareTo("") == 0) 
			map.put("content", "empty");
		else if (content.length() > 5000) 
			map.put("content", "tooLong");
		else map.put("content", "OK");
		
		if (map.get("content").equals("OK")) {

			int vulnerabilityId = Integer.parseInt(vulnerabilityNumber.split("-")[2]);
			Vulnerability vulnerability = (Vulnerability) vulnerabilityDAO.getByID(vulnerabilityId);
			User user = userDAO.getUserByEmail(email);
			List<Exploit> exploits = exploitDAO.getByUserAndVulnerability(user, vulnerability, -1, -1);
		
			if(exploits.size() == 0){
				map.put("content", "doesnotExist");
				map.put("status", "fail");
				return map;
			}
			Exploit exploit = exploits.get(0);
			exploit.setContent(content);
			exploit.setDatetime(new Date());
			
			exploitDAO.update(exploit);
			map.put("status", "success");
		}
		else map.put("status", "fail");
		
		return map;
	}

}
