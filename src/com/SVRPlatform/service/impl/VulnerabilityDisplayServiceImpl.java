package com.SVRPlatform.service.impl;

import java.util.HashMap;
import java.util.Map;

import com.SVRPlatform.model.Bug;
import com.SVRPlatform.model.BugWatch;
import com.SVRPlatform.model.Software;
import com.SVRPlatform.model.Solution;
import com.SVRPlatform.service.VulnerabilityDisplayService;

public class VulnerabilityDisplayServiceImpl implements VulnerabilityDisplayService {
	private UserDAO userDAO;
	private VulnerabilityDAO vulnerabilityDAO;
	
	

	public Map<String, String> vulnerabilityDisplay(int userID,	String vulnerabilityNumber) {
		Map<String, String> map = new HashMap<String, String>();
		
		int vulnerabilityID = Integer.parseInt(vulnerabilityNumber.split("-")[2]);		
		Vulnerability vulnerability = (Vulnerability) vulnerabilityDAO.getByID(vulnerabilityID);
		if (vulnerability == null) { 
			map.put("status", "fail");
			return map;
		}
		
		Software software = vulnerability.getSoftware();

		Solution solution;
		if (vulnerability.getSolutionId() != null )
			solution = (Solution) solutionDAO.getByID(vulnerability.getSolutionId());
		else solution = null;
		
		/*
		private String strVulnerabilityType;
		private String strBestExploit;
		*/
		
		map.put("strVulnerabilityNumber", vulnerability.getVulnerabilityNumber());
		map.put("strVulnerabilityDigest", vulnerability.getVulnerabilityDigest());
		map.put("strDate", vulnerability.getDatetime().toString().substring(0, 16));
		map.put("strScore", Float.toString(vulnerability.getScore()));
		map.put("strConfidentialityImpact", Float.toString(vulnerability.getConfidentialityImpact()));
		map.put("strIntegrityImpact", Float.toString(vulnerability.getIntegrityImpact()));
		map.put("strAvailabilityImpact", Float.toString(vulnerability.getAvailabilityImpact()));
		map.put("strAccessComplexity", Float.toString(vulnerability.getAccessComplexity()));
		map.put("strAuthentication", Float.toString(vulnerability.getAuthentication()));
		map.put("strGainedAccess", Float.toString(vulnerability.getGainedAccess()));
		map.put("strVulnerabilityType", Float.toString(vulnerability.getVulnerabilityType()));
		map.put("strGainedAccess", Float.toString(vulnerability.getGainedAccess()));
		map.put("strScreenshotPath", vulnerability.getGraphAddress());
		map.put("strVulnerabilityDescription", vulnerability.getDescription());
		map.put("strCompany", software.getCompany());
		map.put("strSoftware", software.getName());
		map.put("strVersion", vulnerability.getVersion());
		map.put("strLanguage", vulnerability.getLanguage());
		map.put("strUp", vulnerability.getUp().toString());
		
		VulnerabilityWatch vulnerabilityWatch = vulnerabilityWatchDAO.getByUserAndVulnerability(userDAO.getUserByEmail(email), vulnerability);
		if (vulnerabilityWatch != null) {
			if (vulnerabilityWatch.getVoteFlag() == 1) map.put("strVotedUp", "true");
		}
		
		if (solution != null)
			map.put("strSolution", solution.getContent());
		map.put("status", "success");

		return map;
	}
}
