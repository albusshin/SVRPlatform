package com.SVRPlatform.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import com.SVRPlatform.Utils.HTMLTranscoder;
import com.SVRPlatform.dao.UserDAO;
import com.SVRPlatform.dao.VulnerabilityCommentDAO;
import com.SVRPlatform.dao.VulnerabilityDAO;
import com.SVRPlatform.model.User;
import com.SVRPlatform.model.Vulnerability;
import com.SVRPlatform.model.VulnerabilityComment;
import com.SVRPlatform.service.VulnerabilityCommentSubmitService;

public class VulnerabilityCommentSubmitServiceImpl implements
		VulnerabilityCommentSubmitService {
	private UserDAO userDAO;
	private VulnerabilityDAO vulnerabilityDAO;
	private VulnerabilityCommentDAO vulnerabilityCommentDAO;
	
	public UserDAO getUserDAO() {
		return userDAO;
	}

	public void setUserDAO(UserDAO userDAO) {
		this.userDAO = userDAO;
	}

	public VulnerabilityDAO getVulnerabilityDAO() {
		return vulnerabilityDAO;
	}

	public void setVulnerabilityDAO(VulnerabilityDAO vulnerabilityDAO) {
		this.vulnerabilityDAO = vulnerabilityDAO;
	}

	public VulnerabilityCommentDAO getVulnerabilityCommentDAO() {
		return vulnerabilityCommentDAO;
	}

	public void setVulnerabilityCommentDAO(
			VulnerabilityCommentDAO vulnerabilityCommentDAO) {
		this.vulnerabilityCommentDAO = vulnerabilityCommentDAO;
	}

	public Map<String, String> commentSubmit(String vulnerabilityNumber,
			String email, String title, String content) {
		Map<String, String> map = new HashMap<String, String>();

		// check if bug information is complete
		if (title.compareTo("") == 0)
			map.put("title", "empty");
		else if (title.length() > 256)
			map.put("title", "tooLong");
		else
			map.put("title", "OK");

		if (content.compareTo("") == 0)
			map.put("content", "empty");
		else if (content.length() > 5000)
			map.put("content", "tooLong");
		else
			map.put("content", "OK");

		if (map.get("title").equals("OK") && map.get("content").equals("OK")) {
			map.put("status", "success");

			int vulnerabilityID = Integer.parseInt(vulnerabilityNumber.split("-")[2]);
			Vulnerability vulnerability = (Vulnerability) vulnerabilityDAO.getByID(vulnerabilityID);
			User user = userDAO.getUserByEmail(email);
			VulnerabilityComment vulnerabilityComment = new VulnerabilityComment();
			vulnerabilityComment.setVulnerability(vulnerability);
			vulnerabilityComment.setCommentTitle(HTMLTranscoder.transcode(title));
			vulnerabilityComment.setContent(content);
			vulnerabilityComment.setDatetime(new Date());
			vulnerabilityComment.setUser(user);

			vulnerabilityCommentDAO.add(vulnerabilityComment);
		} else
			map.put("status", "fail");

		return map;
	}
}
