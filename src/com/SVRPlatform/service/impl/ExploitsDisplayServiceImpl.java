package com.SVRPlatform.service.impl;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import com.SVRPlatform.dao.ExploitDAO;
import com.SVRPlatform.dao.ExploitVoteDAO;
import com.SVRPlatform.dao.UserDAO;
import com.SVRPlatform.dao.VulnerabilityDAO;
import com.SVRPlatform.data.ExploitData;
import com.SVRPlatform.data.VulnerabilityExploitsData;
import com.SVRPlatform.model.Exploit;
import com.SVRPlatform.model.ExploitVote;
import com.SVRPlatform.model.User;
import com.SVRPlatform.model.Vulnerability;
import com.SVRPlatform.service.ExploitsDisplayService;

public class ExploitsDisplayServiceImpl implements ExploitsDisplayService {
	private UserDAO userDAO;
	private VulnerabilityDAO vulnerabilityDAO;
	private ExploitDAO exploitDAO;
	private ExploitVoteDAO exploitVoteDAO;
	
	public UserDAO getUserDAO() {
		return userDAO;
	}

	public void setUserDAO(UserDAO userDAO) {
		this.userDAO = userDAO;
	}

	public VulnerabilityDAO getVulnerabilityDAO() {
		return vulnerabilityDAO;
	}

	public void setVulnerabilityDAO(VulnerabilityDAO vulnerabilityDAO) {
		this.vulnerabilityDAO = vulnerabilityDAO;
	}

	public ExploitDAO getExploitDAO() {
		return exploitDAO;
	}

	public void setExploitDAO(ExploitDAO exploitDAO) {
		this.exploitDAO = exploitDAO;
	}

	public ExploitVoteDAO getExploitVoteDAO() {
		return exploitVoteDAO;
	}

	public void setExploitVoteDAO(ExploitVoteDAO exploitVoteDAO) {
		this.exploitVoteDAO = exploitVoteDAO;
	}

	public VulnerabilityExploitsData exploitsDisplayService(int userID,
			String vulnerabilityNumber, int pageNumber, int exploitsPerPage) {
		VulnerabilityExploitsData vulnerabilityExploitsData = new VulnerabilityExploitsData();
		
		int vulnerabilityId = Integer.parseInt(vulnerabilityNumber.split("-")[2]);
		Vulnerability vulnerability = (Vulnerability) vulnerabilityDAO.getByID(new Integer(vulnerabilityId));
		int count = (int) exploitDAO.getCountFromOneVulnerability(vulnerability);
		
		int firstResult = (pageNumber - 1) * exploitsPerPage;
		int fetchSize = exploitsPerPage;
		if (firstResult + fetchSize > count)
			fetchSize = count - firstResult;
		
		List<Exploit> exploits = exploitDAO.getByVulnerability(vulnerability, fetchSize, firstResult);
		List<ExploitData> exploitsData = new LinkedList<ExploitData>();

		Map<Integer, Integer> voted = new HashMap<Integer, Integer>();
		if (userID != -1 && exploits.size() > 0) {
			List<ExploitVote> exploitVotes = exploitVoteDAO.getExploitVoteFromExploitList(exploits, (User)userDAO.getByID(userID));			
			for (int i = 0;i < exploitVotes.size();i++)
				voted.put(exploitVotes.get(i).getExploit().getExploitId(), exploitVotes.get(i).getVoteFlag());
		}
		
		ListIterator<Exploit> it = exploits.listIterator();
		Exploit exploit;
		ExploitData exploitData;
		User user;
		while(it.hasNext()) {
			exploit = it.next();
			exploitData = new ExploitData();
			user = exploit.getUser();			

			exploitData.setVotedUp(false);
			exploitData.setVotedDown(false);
			int exploitID = exploit.getExploitId();
			if (voted.containsKey(exploitID)) {
				if (voted.get(exploitID) == 1)
					exploitData.setVotedUp(true);
				else
					exploitData.setVotedDown(true);
			}
				
			exploitData.setExploitID(exploitID);
			exploitData.setContent(exploit.getContent());
			exploitData.setDatetime(exploit.getDatetime().toString());
			exploitData.setRealname(user.getRealName());
			exploitData.setEmail(user.getEmail());
			exploitData.setCredits(user.getCredit());
			exploitData.setUp(exploit.getUp());
			exploitData.setDown(exploit.getDown());
			exploitData.setBest(false);
			exploitsData.add(exploitData);
		}
		if (pageNumber == 1 && exploitsData.size() > 0) 
			exploitsData.get(0).setBest(true);
		
		vulnerabilityExploitsData.setExploitCount(count);
		vulnerabilityExploitsData.setExploitsData(exploitsData);

		return vulnerabilityExploitsData;
	}

	public boolean ifAlreadyGiven(int userID, String vulnerabilityNumber) {
		User user = (User) userDAO.getByID(userID);
		if (user == null) return false;
		int vulnerabilityID = Integer.parseInt(vulnerabilityNumber.split("-")[2]);
		Vulnerability vulnerability = (Vulnerability) vulnerabilityDAO.getByID(vulnerabilityID);
		if( exploitDAO.getByUserAndVulnerability(user, vulnerability, -1, -1).size() != 0)
			return true;
		return false;
	}
}
