package com.SVRPlatform.dao.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.FetchMode;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import com.SVRPlatform.dao.VulnerabilityWatchDAO;
import com.SVRPlatform.model.User;
import com.SVRPlatform.model.Vulnerability;
import com.SVRPlatform.model.VulnerabilityWatch;

public class VulnerabilityWatchDAOImpl extends BasicDAOImpl implements
		VulnerabilityWatchDAO {

	@Override
	public Object getByID(Serializable ID) {
		// TODO Auto-generated method stub
		Session s = this.sessionFactory.openSession();
		try{
			return s.get(VulnerabilityWatch.class, ID);
		}finally{
			if(s!=null)
				s.close();
		}
	}

	@Override
	public VulnerabilityWatch getByUserAndVulnerability(User user,
			Vulnerability vulnerability) {
		// TODO Auto-generated method stub
		Session s = this.sessionFactory.openSession();
		try{
			org.hibernate.Criteria c = s.createCriteria(VulnerabilityWatch.class);
			c.add(Restrictions.eq("user", user));
			c.add(Restrictions.eq("vulnerability", vulnerability));
			return (VulnerabilityWatch) c.uniqueResult();
		}finally{
			if(s!=null)
				s.close();
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<VulnerabilityWatch> getVulnerabilityWatchFromSolutionList(
			List<Vulnerability> vulnerability, User user) {
		// TODO Auto-generated method stub
		Session s = this.sessionFactory.openSession();
		try{
			org.hibernate.Criteria c = s.createCriteria(VulnerabilityWatch.class);
			c.add(Restrictions.eq("user", user));
			c.add(Restrictions.in("vulnerability", vulnerability.toArray()));
			c.setFetchMode("vulnerability", FetchMode.JOIN);	
			return c.list();
		}finally{
			if(s!=null)
				s.close();
		}
	}

	@Override
	public List<Vulnerability> getByUser(User user) {
		// TODO Auto-generated method stub
		Session s = this.sessionFactory.openSession();
		try{
			org.hibernate.Criteria c = s.createCriteria(VulnerabilityWatch.class);
			c.add(Restrictions.eq("user", user));
			c.add(Restrictions.eq("voteFlag", new Integer(1)));
			c.setFetchMode("vulnerability", FetchMode.JOIN);
			List<Vulnerability> list = new ArrayList<Vulnerability>();
			@SuppressWarnings("unchecked")
			List<VulnerabilityWatch> results = c.list();
			for(VulnerabilityWatch vulnerabilityWatch: results){
				list.add(vulnerabilityWatch.getVulnerability());
			}
			return list;
		}finally {
			if(s!=null)
				s.close();
		}
	}

}
