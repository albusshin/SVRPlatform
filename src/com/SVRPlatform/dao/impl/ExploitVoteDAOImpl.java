package com.SVRPlatform.dao.impl;

import java.io.Serializable;
import java.util.List;

import org.hibernate.FetchMode;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import com.SVRPlatform.dao.ExploitVoteDAO;
import com.SVRPlatform.model.Exploit;
import com.SVRPlatform.model.ExploitVote;
import com.SVRPlatform.model.User;

public class ExploitVoteDAOImpl extends BasicDAOImpl implements ExploitVoteDAO {

	@Override
	public Object getByID(Serializable ID) {
		// TODO Auto-generated method stub
		Session s = this.sessionFactory.openSession();
		try{
			return s.get(ExploitVote.class, ID);
		}finally{
			if(s!=null)
				s.close();
		}
	}

	@Override
	public ExploitVote getByUserAndExploit(User user, Exploit exploit) {
		// TODO Auto-generated method stub
		Session s = this.sessionFactory.openSession();
		try{
			org.hibernate.Criteria c = s.createCriteria(ExploitVote.class);
			c.add(Restrictions.eq("user", user));
			c.add(Restrictions.eq("exploit", exploit));
			return (ExploitVote) c.uniqueResult();
		}finally{
			if(s!=null)
				s.close();
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ExploitVote> getExploitVoteFromExploitList(
			List<Exploit> exploits, User user) {
		// TODO Auto-generated method stub
		Session s = this.sessionFactory.openSession();
		try{
			org.hibernate.Criteria c = s.createCriteria(ExploitVote.class);
			c.add(Restrictions.eq("user", user));
			c.add(Restrictions.in("exploit", exploits.toArray()));
			c.setFetchMode("exploit", FetchMode.JOIN);	
			return c.list();
		}finally{
			if(s!=null)
				s.close();
		}
	}

}
